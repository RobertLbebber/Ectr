<body ng-app="SignupModule" ng-controller="SignupController" ng-cloak>
  <div class="container-fluid">

    <!-- Creates the navbar -->
    <nav class="navbar navbar-default navbar-inverse ">
      <!-- This creates the mechanism for the collapse button -->
      <button type="button" class="navbar-toggle" data-toggle="collapse" ng-init="navCollapsed = true" ng-click="navCollapsed = !navCollapsed">

        <!-- This controls the number of lines in the image when the nav collapse -->
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>

      <!-- This is the brand on the left-hand side. -->
      <div class="navbar-brand">
        <a class="content/pages/navbar-brand" href="/">
          <b class="brand">Ectr</b>
        </a>
      </div>
      <div class="collapse navbar-collapse" ng-class="!navCollapsed && 'in'">

        <!-- LOGIN FORM -->
        <form action="/User/login" method="post" ng-submit="submitLoginForm()" class="navbar-form navbar-right">
          <!-- E M A I L -->
          <div class="form-group">
            <input ng-model="loginForm.email" type="text" placeholder="Email" name="email" class="form-control" required>
          </div>

          <!-- P A S S W O R D -->
          <div class="form-group">
            <input ng-model="loginForm.password" type="password" placeholder="Password" name="password" class="form-control" required>
          </div>

          <!-- S U B M I T -->
          <button type="submit" class="btn btn-success">
            <span ng-show="!loginForm.loading">Sign in</span>
            <span ng-show="loginForm.loading" class="fa fa-spinner fa-spin"></span>
            <span ng-show="loginForm.loading">Signing up...</span>
          </button>
          <input type="hidden" name="_csrf" value="<%= _csrf %>" />
        </form>
      </div>
    </nav>
  </div>

  <!-- SIGNUP FORM -->
  <div class="container">
    <form action="/User/create" method="post" ng-submit="submitSignupForm()" id="sign-up-form" class="form-signin" name="signup">
      <h2 class="form-signin-heading">Create an account</h2>
      <% if(flash && flash.err) { %>
        <div class="alert alert-danger serverr">
          <h3>Client-Error Server-Detection</h3>
          <ul class="alter alter-success">
            <% Object.keys(flash.err).forEach(function(error) {%>
              <li>
                <%- JSON.stringify(flash.err[error]) %>
              </li>
              <% }) %>
          </ul>
        </div>
        <% } %>

          <div class="row">

            <!-- FIRST NAME -->

            <!-- checking whether the form "signup" with the "name" property is both $invalid AND $dirty.  If it is
          insert the "has-error" class on the input field (i.e. insert a red border around the input field)
          -->
            <div class="control-group form-group col-md-12" ng-class="{'has-error':signup.name.$invalid && signup.name.$dirty}">
              <label>Your first name</label>

              <!-- For this input field make it required, and have a max length of 25 -->
              <input type="text" class="form-control" name="fname" ng-model="signupForm.fname" ng-maxlength="50" required>

              <!-- Also, if signup.name.$dirty is true, show the message depending upon the particular properties truthiness (e.g. required
            and/or maxlength) -->
              <span class="help-block has-error" ng-if="signup.fname.$dirty">
                <span ng-show="signup.fname.$error.required">First name is required.</span>
                <span ng-show="signup.fname.$error.maxlength">The first name cannot be more than 50 characters.</span>
              </span>
            </div>

            <!-- LAST NAME -->

            <div class="control-group form-group col-md-12" ng-class="{'has-error':signup.name.$invalid &&signup.lname.$dirty}">
              <label>Your last name</label>
              <input type="text" class="form-control" name="lname" ng-model="signupForm.lname" ng-maxlength="50" required>
              <span class="help-block has-error" ng-if="signup.lname.$dirty">
                <span ng-show="signup.lname.$error.required">Last name is required.</span>
                <span ng-show="signup.lname.$error.maxlength">The last name cannot be more than 50 characters.</span>
              </span>
            </div>

            <!-- E M A I L -->

            <div class="control-group form-group col-md-12" ng-class="{'has-error':signup.email.$invalid &&
                                signup.email.$dirty}">
              <label>Your email address</label>
              <input type="email" class="form-control" name="email" ng-model="signupForm.email" required>
              <span class="help-block has-error" ng-if="signup.email.$dirty">
                <span ng-show="signup.email.$error.required">Email address is required.</span>
                <span ng-show="signup.email.$error.email">Not a valid email address.</span>
              </span>
            </div>

            <div class="control-group form-group col-md-7 ">
              <label for="exampleFormControlFile1">Profile Picture</label>
              <input type="file" class="form-control-file" name="profilepic">
            </div>

            <!-- P A S S W O R D -->

            <div class="control-group form-group col-md-6" ng-class="{'has-error':signup.password.$invalid &&
                                signup.password.$dirty}">
              <label>Choose a password</label>
              <!-- Added the compareTo directive that compares the passowrds -->
              <input type="password" class="form-control" placeholder="at least 6 characters" name="password" ng-model="signupForm.password"
                id="password" required ng-minlength="6" compare-to="signupForm.confirmPassword">
              <span class="help-block has-error" ng-if="signup.password.$dirty">
                <span ng-show="signup.password.$error.required">Password is required.</span>
                <span ng-show="signup.password.$error.minlength">Password must be at least 6 characters.</span>
              </span>
            </div>

            <!-- C O N F I R M  P A S S W O R D -->

            <div class="control-group form-group col-md-6">
              <label>Re-enter your password</label>
              <input type="password" class="form-control" name="confirmation" ng-model="signupForm.confirmPassword" required>
              <span class="help-block has-error" ng-if="signup.confirmation.$dirty">
                <span ng-show="signup.password.$error.compareTo">Password must match.</span>
                <span ng-show="signup.confirmation.$error.required">Confirmation password is required.</span>
              </span>
            </div>
          </div>

          <br/>
          <!-- <iframe src="https://www.google.com/maps/d/u/0/embed?mid=1Alri5nE84UId5yWogeBN8FvV3s0" width="640" height="480"></iframe> -->
          <!-- Disable signup button until the form has no errors -->
          <button class="btn btn-primary btn-lg btn-block" type="submit">
            <span ng-show="!signupForm.loading">Create Account</span>
            <span ng-show="signupForm.loading" class="fa fa-spinner fa-spin"></span>
            <span ng-show="signupForm.loading">Preparing your new account...</span>
          </button>

          <input type="hidden" name="_csrf" value="<%= _csrf %>" />
    </form>
  </div>


  <div id="map"></div>

  <head>
    <style>
      /* Always set the map height explicitly to define the size of the div
                 * element that contains the map. */

      #map {
        margin-left: 12.5%;
        margin-top: 12.5%;
        margin-bottom: 12.5%;
        height: 75%;
        width: 75%;
      }

      /* Optional: Makes the sample page fill the window. */

      html,
      body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
    </style>
  </head>

  <script>
    var map;
    function initMap() {
      map = new google.maps.Map(document.getElementById('map'), {
        zoom: 10,
        center: new google.maps.LatLng(42.7185, -73.7522),
        mapTypeId: 'terrain'
      });

      // Create a <script> tag and set the USGS URL as the source.
      var script = document.createElement('script');
      // This example uses a local copy of the GeoJSON stored at
      // http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_week.geojsonp
      // oob =
      script.src = 'https://developers.google.com/maps/documentation/javascript/examples/json/earthquake_GeoJSONP.js';
      console.log(script.src, null, 2);
      document.getElementsByTagName('head')[0].appendChild(script);
    }

    // Loop through the results array and place a marker for each
    // set of coordinates.
    window.eqfeed_callback = function (results) {
      for (var i = 0; i < results.features.length; i++) {
        var coords = results.features[i].geometry.coordinates;
        var latLng = new google.maps.LatLng(coords[1], coords[0]);
        var marker = new google.maps.Marker({
          position: latLng,
          map: map
        });
      }
    }
  </script>
  <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCWw6LxNyKuTsQiJrwmd2hijX3cUgNniCg&callback=initMap">
  </script>